%=====================================================================%
% Purpose:                                                            %
%   The purpose of this script is to  practice with the SOR method.   %
%                                                                     %
% Author:                                                             %
%   Emilio Torres                                                     %
%=====================================================================%
%=====================================================================%
% Spatial and time stepping variables                                 %
%=====================================================================%
M       = 80;
N       = 80; 
dx      = 2.0/M;
dy      = 2.0/N;
rho     = 0.5*(cos(pi/M) + cos(pi/N));
omega   = 2.0/(1.0 + sqrt(1.0 -  rho^(2.0)));
itermax = 1800;
%=====================================================================%
% Preallocating variables                                             %
%=====================================================================%
f       = 0.0;
phi     = 0.0;
res     = 0.0;
res_vec = 0.0;
counter = 0;
%=====================================================================%
% Calculating x and y vectors                                         %
%=====================================================================%
x(1)    = -1.0;
y(1)    = -1.0;
for i = 2:M+1 
    x(i) = x(i-1) + dx;
end
for j = 2:N+1 
    y(j) = y(j-1) + dx;
end
%=====================================================================%
% Calculating RHS                                                     %
%=====================================================================%
for j = 1:N+1
    for i = 1:M+1
        f(j,i) = 10.0 - 10.0*(cos(x(i)))^2.0 + 10.0*sin(y(j));
    end
end
%=====================================================================%
% Setting the initial condition                                       %
%=====================================================================%
for j = 1:N+1
    for i = 1:M+1
        phi(j,i)    = 0.5*sin(pi*x(i)) * sin(4.0*pi*x(i));
    end
end
phi(:,1)    = 0.0;
phi(:,M+1)  = 0.0;
phi(1,:)    = 0.0;
phi(N+1,:)  = 0.0;
res         = zeros(N+1, M+1);
%=====================================================================%
% Iteration loop                                                      %
%=====================================================================%
for k = 1:itermax
    %-----------------------------------------------------------------%
    % SOR method                                                      %
    %-----------------------------------------------------------------%
    for j = 2: N
       for i = 2: M
           phi(j,i)    = phi(j,i) + ...
                           omega*(0.25*(phi(j,i+1) + phi(j,i-1) + phi(j+1,i) + phi(j-1,i)) ...
                           - 0.25*(dx)^2.0*f(j,i) - phi(j,i));
      end
    end
    %-----------------------------------------------------------------%
    % SOR method                                                      %
    %-----------------------------------------------------------------%
%     for j = 2:N
%         for i = 2:M
%             phi(j,i)    = 0.25*(phi(j,i+1) + phi(j,i-1) + phi(j+1,i) + phi(j-1,i)) ...
%                             - 0.25*dx*dx*f(j,i) ;
%         end
%     end
    %-----------------------------------------------------------------%
    % Maximum residual for each iteration                             %
    %-----------------------------------------------------------------%
    for j = 2:N
        for i = 2:M
            res(j,i)    = (phi(j,i+1) -2.0*phi(j,i) + phi(j,i-1))/(dx*dx) + ...
                            (phi(j+1,i) -2.0*phi(j,i) + phi(j-1,i))/(dy*dy) - ... 
                            f(j,i);
        end
    end
    res_vec(k)  = max(max(abs(res)));
    counter     = counter + 1 ;
    if (counter > 1) 
        disp(res_vec(k-1));
        counter = 0;
    end 
end
