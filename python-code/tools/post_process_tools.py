#!/usr/bin/env python3
"""========================================================================
Purpose:
    This script contains all the tools to perform the post processing for
    the NS simulations.

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import os
import sys
from subprocess import call
from numpy import *
import matplotlib.pyplot as plt
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Center line plots                                                       #
#-------------------------------------------------------------------------#
def center_line(
        M,
        N,
        field,
        field_flag,
        plot_sets   = False,
        save_flag   = False,
        show_flag   = False):

    """
    Generating center line velocity plots
            **** Note:
                    field_flag = 1 --> x-velocity
                    field_flag = 2 --> y-velocity
    """
    #---------------------------------------------------------------------#
    # Ensuring the flags are integers                                     #
    #---------------------------------------------------------------------#
    field_flag  = int(field_flag)
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    dx  = 1./M
    x   = linspace(-0.5*dx, 1.0+0.5*dx, M+2)
    if field_flag == 1:
        vel = field[:,int(M/2)]
    elif field_flag == 2:
        vel = field[int(N/2),:]
    else:
        print('Flag --> %i not recognized'          %(field_flag))
        sys.exit(1)
    #---------------------------------------------------------------------#
    # Plotting velocity                                                   #
    #---------------------------------------------------------------------#
    if plot_sets == False:
        plot_sets = ['r', 1.5]
    plt.plot(x, vel, plot_sets[0], lw=plot_sets[1])
    plt.grid(True)
    plt.xlim([0.0, 1.0])
    #---------------------------------------------------------------------#
    # Save and show                                                       #
    #---------------------------------------------------------------------#
    if save_flag is not False:
        plt.savefig(save_flag)
    if show_flag is not False:
        plt.show()
    plt.close()

    return
#-------------------------------------------------------------------------#
# Vorticity field                                                         #
#-------------------------------------------------------------------------#
def vorticity(
        M,
        N,
        u,
        v):

    """
    Calculating the vorticity field
        **** Note:
                Ghost cells are applied to vorticity field
    """
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    dx  = 1.0/M
    dy  = 1.0/N
    rdx = 1/dx
    rdy = 1.0/dy
    #---------------------------------------------------------------------#
    # Preallocating vorticity field                                       #
    #---------------------------------------------------------------------#
    omega   = zeros((N+1,M+1))
    #---------------------------------------------------------------------#
    # Calculating vorticity                                               #
    #---------------------------------------------------------------------#
    for j in range(0, N+1):
        for i in range(0,M+1):
            omega[j,i] = rdx*(v[j, i+1] - v[j,i]) -\
                            rdy*(u[j+1,i] -  u[j,i])

    return omega
#-------------------------------------------------------------------------#
# Vorticity plot                                                          #
#-------------------------------------------------------------------------#
def vorticity_contour(
        M,
        N,
        omega):
    """
    Generating vorticity contour plot
    """
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    x       = linspace(0.0, 1.0, M+1)
    y       = linspace(0.0, 1.0, N+1)
    [X,Y]   = meshgrid(x,y)
    #---------------------------------------------------------------------#
    # Plot settings                                                       #
    #---------------------------------------------------------------------#
    levels  = linspace(-5.0, 3, 9) 
    print(levels)
              
    #---------------------------------------------------------------------#
    # Plotting                                                            #
    #---------------------------------------------------------------------#
    plt.contour(X, Y, omega, levels)
    plt.xlim([0., 1.])
    plt.ylim([0. ,1.])
    plt.show()

    return
#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == '__main__':
    print('**** This is work in progress and has not been unit tested')
    sys.exit(0)
