#!/usr/bin/env python3
"""========================================================================
Purpose:
    The purpose of this script is to solve the 1D Navier-Stokes equations. 

Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Python packages                                                         #
#=========================================================================#
import os
import sys
from subprocess import call
from numpy import *
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Pressure calculation                                                    #
#-------------------------------------------------------------------------#
def pressure_calc(
        num,
        Dx,
        Dt,
        Ustar,
        max_error,
        debug = False):

    """ Calculating pressure """ 
    #--------------------------------------------------------------------#
    # Preallocating variables                                             #
    #---------------------------------------------------------------------#
    P       = zeros(num+2)
    res     = zeros(num+2)
    rhs     = zeros(num+2)
    rhs2    = zeros(num+2) 
    err     = 1.0
    #---------------------------------------------------------------------#
    # Calculating rhs                                                     #
    #---------------------------------------------------------------------#
    for i in range(1,num+1):
        rhs[i]  = (Dx/Dt)*(Ustar[i] - Ustar[i-1])
        rhs2[i] = (1/Dx)*(1/Dt)*(Ustar[i] - Ustar[i-1]) 
    #---------------------------------------------------------------------#
    # Gauss Seidel                                                        #
    #---------------------------------------------------------------------#
    gs_count    = 0
    gs_iter     = 0
    while err > max_error:
        #-----------------------------------------------------------------#
        # Counters                                                        #
        #-----------------------------------------------------------------#
        gs_count    += 1
        gs_iter     += 1
        #-----------------------------------------------------------------#
        # Calculating pressure                                            #
        #-----------------------------------------------------------------#
        for i in range(1,num+1):
            P[i]    = 0.5*(P[i+1]+P[i-1]) - 0.5*rhs[i]
        #-----------------------------------------------------------------#
        # Neumann boundary conditions                                     #
        #-----------------------------------------------------------------#
        P[0]        = P[1]
        P[num+1]    = P[num]
        #-----------------------------------------------------------------#
        # Calculating residual                                            #
        #-----------------------------------------------------------------#
        for i in range(1,num+1):
            res[i] = (1/Dx**2.0)*(P[i+1] - 2.0*P[i] + P[i-1]) - rhs2[i]
        err = amax(abs(res))
        #-----------------------------------------------------------------#
        # Print statement                                                 #
        #-----------------------------------------------------------------#
        if gs_count > 200 and debug is not False:
            print('gs_iter ---> %12.8e\terror ---> %12.8e'\
                        %(gs_iter, err))
            gs_count = 0
    
    return P

#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == '__main__':
    #---------------------------------------------------------------------#
    # Main preamble                                                       #
    #---------------------------------------------------------------------#
    call(['clear'])
    sep         = os.sep
    pwd         = os.getcwd()
    data_path   = pwd + '%cdata%c'          %(sep, sep)
    #---------------------------------------------------------------------#
    # Domain variables                                                    #
    #---------------------------------------------------------------------#
    nu      = 0.05
    L       = 1.0 
    M       = 64
    dx      = L/float(M)
    dt      = 0.1*dx
    #---------------------------------------------------------------------#
    # Convergence variables                                               #
    #---------------------------------------------------------------------#
    t           = 0.0
    tfinal      = 1.0
    gs_error    = 1.0e-8
    #---------------------------------------------------------------------#
    # Preallocating variables                                             #
    #---------------------------------------------------------------------#
    u       = zeros(M+1)
    ustar   = zeros(M+1)
    #---------------------------------------------------------------------#
    # Initial condition                                                   #
    #---------------------------------------------------------------------#
    u[:]        = 0.0
    ustar[:]    = 0.0
    #---------------------------------------------------------------------#
    # Boundary conditions                                                 #
    #---------------------------------------------------------------------#
    u[0]        = 0.0
    u[M]        = 1.0
    ustar[0]    = 0.0
    ustar[M]    = 1.0
    #---------------------------------------------------------------------#
    # Time loop                                                           #
    #---------------------------------------------------------------------#
    count   = 0
    while t < tfinal:
        #-----------------------------------------------------------------#
        # Updating time and printout                                      #
        #-----------------------------------------------------------------#
        t       += dt
        count   += 1
        #-----------------------------------------------------------------#
        # Calculating ustar                                               #
        #-----------------------------------------------------------------#
        for i in range(1,M):
            u1  = 0.5*(u[i+1] + u[i])
            u2  = 0.5*(u[i] + u[i-1])
            ustar[i]    = u[i] - dt/dx *(u1**2.0-u2**2.0)\
                                + nu*(dt/dx**2.0)*(u[i+1]-2.*u[i]+ u[i-1])  
        #-----------------------------------------------------------------#
        # ustar boundary conditions                                       #
        #-----------------------------------------------------------------#
        ustar[0]    = 0.0
        ustar[M]    = 1.0
        #-----------------------------------------------------------------#
        # Calculating pressure                                            #
        #-----------------------------------------------------------------#
        p   = pressure_calc(M, dx, dt, ustar, gs_error, True)
        #-----------------------------------------------------------------#
        # Calculating u^{n+1}                                             #
        #-----------------------------------------------------------------#
        for i in range(1,M):
            u[i]    = ustar[i] + (dt/dx)*(p[i+1]-p[i])
        #-----------------------------------------------------------------#
        # u^{n+1} boundary conditions                                     #
        #-----------------------------------------------------------------#
        u[0]    = 0.0
        u[M]    = 1.0
        #-----------------------------------------------------------------#
        # Print statement                                                 #
        #-----------------------------------------------------------------#
        if count == 1:
            print('time ---> %12.8e'            %(t))
            print('u_{max} ---> %12.8e'         %(amax(abs(u))))
            count = 0
